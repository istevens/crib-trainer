:root {
    --tableColour: rgb(0, 200, 40);
    --tableDecorColour: hsl(60, 100%, 75%, 0.5);
    --titleColour: hsl(60, 100%, 75%, 0.75);
    --uiElementBorder: 5px solid var(--tableDecorColour);
    --successColour: chartreuse;
    --failureColour: red;
    --dialogColour: hsl(43, 100%, 92%);
    --dialogDecorColour: hsl(43, 100%, 20%);
    --buttonWidth: 12rem;
    --outerPadding: 0.5rem;
    --interItemPadding: 0.5rem;
    --outlineOffset: 10px;
    --titleAspectRatio: 1310/403;
    --maxTitleWidth: 40rem;
    --trickWidth: 50%;
    --trickLabelWidth: 6rem;
    --playTopMargin: calc(-0.3 * (100vw / (var(--titleAspectRatio))));
    --cardGroupingFactor: 5;
    --svgTrianglesInactive: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -8 8 16"><polygon points="8,-1 4.5,-8 1,-1" fill="black"/><polygon points="4.5,8 1,1 8,1" fill="black"/></svg>');
    --svgTrianglesActive: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -8 8 16"><polygon points="8,-1 4.5,-8 1,-1" fill="rgba(255, 255, 130, 0.5)"/><polygon points="4.5,8 1,1 8,1" fill="rgba(255, 255, 130, 0.5)"/></svg>');
}

* {
    -webkit-user-select: none;
    user-select: none;
}

html {
    padding: 0;
    justify-content: center;
    background: black;
}

html, body, #cribtrainer {
    width: 100%;
    height: 100%;
    margin: 0;
}

h1 {
    margin: 0;
    align-self: stretch;
}

h2 {
    font-size: 2rem;
    font-weight: 700;
    text-align: center;
    margin: 0;
}

h1 a {
    display: block;
    aspect-ratio: var(--titleAspectRatio);
    max-width: var(--maxTitleWidth);
    margin: auto;
    color: transparent;
    background: var(--titleColour);
    mask-image: url(img/cribtrainer-arched.svg);
    mask-size: contain;
    mask-repeat: no-repeat;
    mask-position: center;
}

a {
    text-decoration: none;
    color: inherit;
    width: 100%;
}

p {
    font-size: 1.33rem;
}

[role=dialog], ::backdrop, #cribtrainer {
    overflow: hidden;
    overscroll-behavior: none;
    touch-action: none;
}

[role=dialog] {
    display: none;
}

select {
    appearance: none;
    background-image: var(--svgTrianglesInactive);
    background-repeat: no-repeat;
    background-position: right 0.5em center;
    background-size: 0.5em;
    padding-right: 1.5em !important;
}

card-set {
    pointer-events: none;
}

:is(:hover, :focus) {
    outline: none;
}

.stacked {
    display: flex;
    flex-direction: column;
    align-items: center;
}

#cribtrainer {
    flex: 1;
    background: fixed radial-gradient(circle at 50% 10rem, var(--tableColour) 0%, rgb(0,120,24) 40%, rgb(0,0,0) 100%);
    font-family: 'Public Sans', sans-serif;
    font-optical-sizing: auto;
    font-weight: 400;
    padding: var(--outerPadding);
    box-sizing: border-box;
}

.view {
    width: 100%;
    max-width: calc(var(--maxTitleWidth) - 1rem);
    gap: 2rem;
    flex: 1;
    max-height: 50rem;
    justify-content: center;
}

.view nav {
    gap: 1rem;
    padding-bottom: 1rem;
    flex: 0;
}

cribbage-cards {
    flex: 1;
    max-width: calc(var(--maxTitleWidth) - 5rem);
    gap: 1rem;
    box-sizing: border-box;
}

.view nav *, select {
    padding: 10px;
    text-align: center;
    background-color: transparent;
    font-size: 2rem;
    font-family: inherit;
    color: var(--tableDecorColour);
    cursor: pointer;
}

.view nav *:not(.primary) {
    width: var(--buttonWidth);
}

:is(.view nav *):hover {
    background-color: var(--tableDecorColour);
    color: black;
}

:is(.view nav *.primary):hover {
    color: var(--tableDecorColour);
    background-color: transparent;
}

.view:not(.activeContent) {
    display: none;
}

#start h2 {
    flex: 1;
    display: flex;
    max-width: calc(var(--maxTitleWidth) * 0.75);
    align-items: center;
}

#play {
    min-height: 0;
    margin-top: var(--playTopMargin);
    position: relative;
}

#cards::part(cutCard), #cards::part(hand), .view nav *, select {
    border: var(--uiElementBorder);
}

#cards::part(cutCard), #cards::part(hand), .view nav *, select, [role=dialog] {
    border-radius: 11.5px;
}

.view nav *.primary:not(select),
#cards::part(cutCard) {
    outline: var(--uiElementBorder);
    outline-offset: var(--outlineOffset);
    margin-bottom: var(--outlineOffset);
}

.view nav *.primary,
select {
    color: black;
    background-color: var(--tableDecorColour);
}

#scoreboard {
    flex-direction: row;
    position: absolute;
    top: calc(1rem - var(--playTopMargin));
    right: 0;
    height: 3rem;
    width: 6rem;
    font-weight: 700;
}

#about {
    max-width: clamp(20rem, 90%, 30rem);
}

#selectedScore {
    font-size: 24em;
    font-weight: 700;
}

@media (hover: hover) {
    select:hover {
        color: var(--tableDecorColour);
        background-color: transparent;
        background-image: var(--svgTrianglesActive);
    }
}

@media (width > 40rem /* maxTitleWidth */ ) {
    :root {
        --outerPadding: 1rem;
        --interItemPadding: 1rem;
        --playTopMargin: calc(-0.3 * (var(--maxTitleWidth) / (var(--titleAspectRatio))));
    }
}

@media (width > 65rem) {
    #play :is(.scoringButton, #scoreboard) {
        position: fixed;
        top: 1rem;
        --titleEdge: calc((100vw - var(--maxTitleWidth)) / 2) - 1rem;
    }

    #play .scoringButton {
        left: calc(var(--titleEdge) - var(--buttonWidth));
    }

    #scoreboard {
        right: calc(var(--titleEdge) - 6rem);
    }
}

@media (orientation: landscape) and (hover: none) {
    :root {
        --maxTitleWidth: calc(25vh * var(--titleAspectRatio));
        --outerPadding: 0.5rem;
        --interItemPadding: 0.5rem;
    }

    .view {
        max-height: 25rem;
    }

    #start, cribbage-cards {
        flex-direction: row;
    }

    #start h2 {
        flex: 1;
    }

    #play {
        flex-direction: column; padding-top: var(--outlineOffset);
        margin: 0 1rem;
    }

    cribbage-cards {
        --cardGroupingFactor: 6;
        max-width: calc(var(--maxTitleWidth) + 13rem);
        gap: 2rem;
    }

    #cards::part(cutCard) {
        flex: none !important;
        animation: forceRedraw 0.01s forwards;
    }

    @keyframes forceRedraw {
        from { opacity: 0.99; }
        to { opacity: 1; }
    }
}
