:root {
    --tableColour: rgb(0, 200, 40);
    --tableDecorColour: hsl(60, 100%, 75%, 0.5);
    --titleColour: hsl(60, 100%, 75%, 0.75);
    --uiElementBorder: 5px solid var(--tableDecorColour);
    --successColour: chartreuse;
    --failureColour: red;
    --dialogColour: hsl(43, 100%, 92%);
    --dialogDecorColour: hsl(43, 100%, 20%);
    --buttonWidth: 12rem;
    --outerPadding: 0.5rem;
    --interItemPadding: 0.5rem;
    --outlineOffset: 10px;
    --titleAspectRatio: 1310/403;
    --maxTitleWidth: 40rem;
    --trickWidth: 50%;
    --trickLabelWidth: 6rem;
    --playTopMargin: calc(-0.3 * (100vw / (var(--titleAspectRatio))));
    --cardGroupingFactor: 5;
    --svgTrianglesInactive: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -8 8 16"><polygon points="8,-1 4.5,-8 1,-1" fill="black"/><polygon points="4.5,8 1,1 8,1" fill="black"/></svg>');
    --svgTrianglesActive: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -8 8 16"><polygon points="8,-1 4.5,-8 1,-1" fill="rgba(255, 255, 130, 0.5)"/><polygon points="4.5,8 1,1 8,1" fill="rgba(255, 255, 130, 0.5)"/></svg>');
}

* {
    -webkit-user-select: none;
    user-select: none;
}

html {
    padding: 0;
    justify-content: center;
    background: black;
}

html, body, #cribtrainer {
    width: 100%;
    height: 100%;
    margin: 0;
}

h1 {
    margin: 0;
    align-self: stretch;
}

h2 {
    font-size: 2rem;
    font-weight: 700;
    text-align: center;
    margin: 0;
}

h1 a {
    display: block;
    aspect-ratio: var(--titleAspectRatio);
    max-width: var(--maxTitleWidth);
    margin: auto;
    color: transparent;
    background: var(--titleColour);
    mask-image: url(img/cribtrainer-arched.svg);
    mask-size: contain;
    mask-repeat: no-repeat;
    mask-position: center;
}

a {
    text-decoration: none;
    color: inherit;
    width: 100%;
}

p {
    font-size: 1.5rem;
}

li {
    list-style: none;
}

ul {
    padding-inline-start: 0;
    margin-inline-start: 0;
}

dialog, ::backdrop, #cribtrainer {
    overflow: hidden;
    overscroll-behavior: none;
    touch-action: none;
}

dialog {
    padding: var(--outerPadding);
    background-color: var(--dialogColour);
    border: 1px solid black;
}

dialog[open] {
    display: flex;
    flex-direction: column;
    justify-items: center;
    width: auto;
    max-height: 90vh;
    max-width: min(90vw, 45rem);
}

dialog span {
    font-weight: 700;
}

dialog form {
    flex: 0 0 auto;
}

dialog card-set {
    height: auto;
    min-height: min(12vh, 5rem);
    max-height: min(20vh, 10rem);
}

select {
    appearance: none;
    background-image: var(--svgTrianglesInactive);
    background-repeat: no-repeat;
    background-position: right 0.5em center;
    background-size: 0.5em;
    padding-right: 1.5em !important;
}

card-set {
    pointer-events: none;
    flex: 1 1 0;
    height: 100%;
    min-height: 0;
}

:is(:hover, :focus) {
    outline: none;
}

.stacked {
    display: flex;
    flex-direction: column;
    align-items: center;
}

#cribtrainer {
    flex: 1;
    background: fixed radial-gradient(circle at 50% 10rem, var(--tableColour) 0%, rgb(0,120,24) 40%, rgb(0,0,0) 100%);
    font-family: 'Public Sans', sans-serif;
    font-optical-sizing: auto;
    font-weight: 400;
    padding: var(--outerPadding);
    box-sizing: border-box;
}

.view {
    width: 100%;
    max-width: calc(var(--maxTitleWidth) - 1rem);
    gap: 2rem;
    flex: 1;
    max-height: 50rem;
    justify-content: center;
}

.view nav {
    gap: 1rem;
    padding-bottom: 1rem;
    flex: 0;
}

#cards {
    flex: 1;
    min-height: 0;
    width: 100%;
    max-width: calc(var(--maxTitleWidth) - 5rem);
    gap: 1rem;
    box-sizing: border-box;
}

.view nav *, select {
    padding: 10px;
    text-align: center;
    background-color: transparent;
    font-size: 2rem;
    font-family: inherit;
    color: var(--tableDecorColour);
    cursor: pointer;
}

.view nav *:not(.primary) {
    width: var(--buttonWidth);
}

:is(.view nav *):hover {
    background-color: var(--tableDecorColour);
    color: black;
}

:is(.view nav *.primary):hover {
    color: var(--tableDecorColour);
    background-color: transparent;
}

.view:not(.activeContent) {
    display: none;
}

#start h2 {
    flex: 1;
    display: flex;
    max-width: calc(var(--maxTitleWidth) * 0.75);
    align-items: center;
}

#play {
    min-height: 0;
    margin-top: var(--playTopMargin);
    position: relative;
}

#cards card-set {
    padding: var(--interItemPadding);
}

#hand, #cutCard, .view nav *, select {
    border: var(--uiElementBorder);
}

#hand {
    grid-template-columns: repeat(auto-fit, minmax(0, calc(100% / var(--cardGroupingFactor))));
    justify-items: center;
    justify-content: center;
}

#hand, dialog, #cutCard, .view nav *, select {
    border-radius: 11.5px;
}

.view nav *.primary:not(select),
#cutCard {
    outline: var(--uiElementBorder);
    outline-offset: var(--outlineOffset);
    margin-bottom: var(--outlineOffset);
}

.view nav *.primary,
select {
    color: black;
    background-color: var(--tableDecorColour);
}

#score {
    display: flex;
    position: absolute;
    top: calc(1rem - var(--playTopMargin));
    right: 0;
    height: 3rem;
    width: 6rem;
    font-weight: 700;
}

#score span {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 50%;
    height: 100%;
}

#score #successes {
    background-color: var(--successColour);
    color: black;
}

#score #failures {
    background-color: var(--failureColour);
    color: white;
}

dialog#about {
    max-width: clamp(20rem, 90%, 30rem);
}

.trickLabel {
    position: relative;
    text-align: center;
    place-items: center;
    min-width: var(--trickLabelWidth);
    margin: auto;
}

.trickScore {
    display: block;
    font-size: 3rem;
    line-height: 75%;
}

.trickList {
    flex-direction: row;
    flex-wrap: wrap;
    align-items: flex-start;
    gap: calc(2*var(--interItemPadding)) var(--interItemPadding);
    flex: 1;
    margin: 0;
    padding-top: calc(2*var(--interItemPadding));
}

.trickCategory {
    display: grid;
    grid-template-columns: var(--trickLabelWidth) 1fr;
    gap: var(--interItemPadding);
    flex: 1 1 100%;
    max-width: 100%;
}

.trickDescription {
    width: 75%;
    font-size: 1rem;
}

#lastPlay {
    position: relative;
    gap: calc(2*var(--interItemPadding));
    padding-bottom: calc(2*var(--interItemPadding));
    margin: auto;
    width: 75%;
}

#lastPlay::after {
    position: absolute;
    display: block;
    width: 75%;
    bottom: 0;
    left: 12.5%;
    content: '';
    border-width: 1px 0 0 0;
    border-image: radial-gradient(circle, var(--dialogDecorColour), 75%, rgba(0,0,0,0)) 1 0;
    border-style: solid;
}

#lastPlay .trickScore {
    font-size: 4rem;
}

#lastCutCard {
    justify-items: flex-start;
}

#lastHand {
    justify-items: flex-end;
}

#tricks .trickCategory .trickLabel::before {
    position: absolute;
    left: 0;
    font-size: 2rem;
    font-weight: 700;
}

#tricks .trickCategory:first-child .trickLabel::before {
    content: '=';
}

#tricks .trickCategory:not(:first-child) .trickLabel::before {
    content: '+';
}

#tricks .trickCategory:only-child .trickLabel::before {
    content: '';
}

#tricks .trickCategory:only-child .trickScore {
    display: none;
}

.trickCategory ul, #lastCards {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: space-evenly;
    align-items: center;
    place-items: center;
    min-height: 0;
    width: 100%;
}

dialog#scoring .trickScore {
    font-size: 2rem;
}

dialog#scoring .trickCategory,
.trickCategory:not(:has(li:nth-child(2))) {
    flex: 1 1 calc(var(--trickWidth) - var(--interItemPadding));
    gap: 0;
}

dialog#scoring .trickLabel,
.trickCategory:not(:has(li:nth-child(2))) .trickLabel {
    min-width: var(--trickLabelWidth);
}

dialog#scoring :has(card-set+span) {
    position: relative;
}

dialog#scoring card-set+span {
    position: absolute;
    bottom: 1rem;
    left: 3rem;
    width: 3rem;
}

dialog#scoring .trickCategory {
    display: flex;
    flex-direction: column;
}

#selectedScore {
    display: flex;
    position: fixed;
    visibility: hidden;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    font-size: 24em;
    font-weight: 700;
    letter-spacing: -0.1em;
    text-indent: -0.1em;
    filter: blur(0);
    transition: filter 500ms ease-in;
}

#selectedScore.active {
    visibility: visible;
    filter: blur(0.25em);
}

#selectedScore.correct {
    color: var(--successColour);
}

#selectedScore.incorrect {
    color: var(--failureColour);
}

@media (hover: hover) {
    select:hover {
        color: var(--tableDecorColour);
        background-color: transparent;
        background-image: var(--svgTrianglesActive);
    }
}

@media (width > 40rem /* maxTitleWidth */ ) {
    :root {
        --playTopMargin: calc(-0.3 * (var(--maxTitleWidth) / (var(--titleAspectRatio))));
    }

    .trickCategory:not(:has(li:nth-child(3))) {
        flex: 1 1 calc(var(--trickWidth) - var(--interItemPadding));
    }

    .trickCategory:not(:has(li:nth-child(3))) .trickLabel {
        min-width: var(--trickLabelWidth);
    }

    dialog#scoring {
        --trickWidth: 33%;
    }
}

@media (width > 65rem) {
    #play :is(.scoringButton, #score) {
        position: fixed;
        top: 1rem;
        --titleEdge: calc((100vw - var(--maxTitleWidth)) / 2) - 1rem;
    }

    #play .scoringButton {
        left: calc(var(--titleEdge) - var(--buttonWidth));
    }

    #score {
        right: calc(var(--titleEdge) - 6rem);
    }
}

@media (orientation: landscape) and (hover: none) {
    :root {
        --maxTitleWidth: calc(25vh * var(--titleAspectRatio));
    }

    dialog[open] {
        gap: var(--outerPadding);
    }

    .view {
        max-height: 25rem;
    }

    #start, #cards {
        flex-direction: row;
    }

    #start h2 {
        flex: 1;
    }

    #play {
        flex-direction: column; padding-top: var(--outlineOffset);
        margin: 0 1rem;
    }

    #cards {
        --cardGroupingFactor: 6;
        max-width: calc(var(--maxTitleWidth) + 13rem);
        gap: 2rem;
    }

    #cutCard {
        flex: none !important;
        animation: forceRedraw 0.01s forwards;
    }

    dialog card-set {
        height: auto;
        min-height: min(20vh, 6rem) !important;
        max-height: min(20vh, 10rem);
    }

    #lastPlay {
        flex-direction: row;
    }

    dialog#scoring {
        --trickWidth: 33%;
    }

    @keyframes forceRedraw {
        from { opacity: 0.99; }
        to { opacity: 1; }
    }
}
